package com.github.search.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.github.search.bean.Owner;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OWNER".
*/
public class OwnerDao extends AbstractDao<Owner, Long> {

    public static final String TABLENAME = "OWNER";

    /**
     * Properties of entity Owner.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Login = new Property(1, String.class, "login", false, "LOGIN");
        public final static Property Avatar_url = new Property(2, String.class, "avatar_url", false, "AVATAR_URL");
    }


    public OwnerDao(DaoConfig config) {
        super(config);
    }
    
    public OwnerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OWNER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"LOGIN\" TEXT," + // 1: login
                "\"AVATAR_URL\" TEXT);"); // 2: avatar_url
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OWNER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Owner entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String login = entity.getLogin();
        if (login != null) {
            stmt.bindString(2, login);
        }
 
        String avatar_url = entity.getAvatar_url();
        if (avatar_url != null) {
            stmt.bindString(3, avatar_url);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Owner entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String login = entity.getLogin();
        if (login != null) {
            stmt.bindString(2, login);
        }
 
        String avatar_url = entity.getAvatar_url();
        if (avatar_url != null) {
            stmt.bindString(3, avatar_url);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Owner readEntity(Cursor cursor, int offset) {
        Owner entity = new Owner( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // login
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // avatar_url
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Owner entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setLogin(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAvatar_url(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Owner entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Owner entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Owner entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
